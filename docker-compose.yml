version: '3.8'

services:
  # PostgreSQL数据库服务
  db:
    image: postgres:15-alpine
    container_name: govhack_db
    environment:
      POSTGRES_DB: govhack_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    networks:
      - govhack_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d govhack_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: govhack_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - govhack_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Django后端服务
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: govhack_web
    ports:
      - "8000:8000"
    environment:
      # Django配置
      SECRET_KEY: "django-insecure-dev-key-change-in-production"
      DEBUG: "True"
      ALLOWED_HOSTS: "localhost,127.0.0.1,web,0.0.0.0"
      
      # 数据库配置
      DB_NAME: govhack_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_HOST: db
      DB_PORT: 5432
      
      # Redis配置
      REDIS_URL: "redis://redis:6379/0"
      
      # API配置
      API_VERSION: v1
      CORS_ALLOWED_ORIGINS: "http://localhost:3000,http://127.0.0.1:3000"
      COOKIE_AUTH: "xuemian168"
    volumes:
      - ./backend:/app
      - ./datasets:/app/datasets:ro  # 只读挂载数据集
      - media_files:/app/media
      - static_files:/app/staticfiles
    networks:
      - govhack_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python manage.py migrate &&
        echo 'Database migration completed.' &&
        python manage.py collectstatic --noinput &&
        echo 'Static files collected.' &&
        gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 govhack_backend.wsgi:application
      "

  # Celery Worker (异步任务处理)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: govhack_celery
    environment:
      # Django配置
      SECRET_KEY: "django-insecure-dev-key-change-in-production"
      DEBUG: "True"
      
      # 数据库配置
      DB_NAME: govhack_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_HOST: db
      DB_PORT: 5432
      
      # Redis配置
      REDIS_URL: "redis://redis:6379/0"
      
      # API配置
      COOKIE_AUTH: "xuemian168"
    volumes:
      - ./backend:/app
      - ./datasets:/app/datasets:ro
    networks:
      - govhack_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A govhack_backend worker --loglevel=info --concurrency=2

  # Nginx反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    container_name: govhack_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - govhack_network
    depends_on:
      - web
    restart: unless-stopped
    profiles:
      - production

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local

# 网络
networks:
  govhack_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16